% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nodes_n_hops.R
\name{find_nodes_n_interlinked}
\alias{find_nodes_n_interlinked}
\title{find nodes within N interlinks}
\usage{
find_nodes_n_interlinked(
  tidy_graph,
  n_interlinked = 1,
  start_nodes = NULL,
  end_nodes = NULL,
  exclude_self = TRUE
)
}
\arguments{
\item{tidy_graph}{the graph to query}

\item{n_interlinked}{how many interlinked nodes to cross to the end nodes}

\item{start_nodes}{the starting nodes (defaults to all nodes)}

\item{end_nodes}{the ending nodes (defaults to all nodes in the graph)}

\item{exclude_self}{should circular paths back to the start node be excluded? (default = TRUE)}
}
\value{
list
}
\description{
Find the paths from start_nodes to end_nodes that are within N interlinked nodes of the start.
}
\details{
This algorithm seeks to find all paths that traverse \strong{up-to} N interlinked nodes between
the provided start and end nodes. As the edge paths are built up, a tibble of edges is generated
that includes \code{from.0} to \code{from.N} (where N is the number of interlinked nodes, see \code{n_interlinked}),
to finally \code{to}, describing the traversal of nodes.

This does mean, to find only the \strong{direct} neighbors, you should use \code{n_interlinked = 0}.

\strong{Note} that the resultant edge set in the graph may include more than these edges, as the filtering of the graph
is done based on the edges found, and not by the subset of edges. Filtering of the graph by
the found edges may be implemented at a later date.

Returned is a list with:
\itemize{
\item \strong{graph}: the filtered graph that contains only those nodes that were found by the hopping algorithm
\item \strong{node_path_id}: the paths found and identified by node numbers
\item \strong{node_path_name}: the paths found and identified by node names from the graph
}
}
